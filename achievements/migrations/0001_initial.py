# Generated by Django 2.2.8 on 2021-09-22 22:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, help_text='A short name to be used to search for the achievement in the database.', max_length=32, unique=True)),
                ('name', models.CharField(help_text='The name of the achievement to be displayed on the page.', max_length=64)),
                ('description', models.CharField(help_text='The full description of the achievement.', max_length=128)),
                ('category', models.CharField(choices=[('general', 'General'), ('event', 'Event'), ('elections', 'Elections'), ('paperwork', 'Paperwork'), ('awards', 'Awards'), ('feats', 'Feats of Strength'), ('website', 'Website')], db_index=True, help_text='Each achievement will be listed in exactly one category.', max_length=64)),
                ('sequence', models.CharField(blank=True, help_text='In addition to the major category classification, each achievement can optionally be part of a sequence. For example, you can have achievements for attending 10, 25, 50, and 100 events. These will be grouped together during the rendering phase. Achievements are not required to be part of a sequence. Adjacent sequence values (by rank) that match will be grouped together.', max_length=128)),
                ('points', models.IntegerField(help_text='The number of points this achievement is worth. Can be positive or negative.')),
                ('goal', models.IntegerField(default=0, help_text='Integer goal for this achievement. 0 means that the progress bar should be hidden.')),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('secret', 'Secret')], db_index=True, default='public', help_text="Each achievement can be public, secret, or private. A public achievement is viewable by everyone. A secret achievement's name and description is hidden until unlocked. A private achievement can't be seen except by the user who has it.", max_length=8)),
                ('manual', models.BooleanField(db_index=True, default=False, help_text='Manual achievements can only be assigned by a human.')),
                ('repeatable', models.BooleanField(db_index=True, default=False, help_text='True if you can get this achievement multiple times - attending all fun events for N semesters should show up Ntimes')),
                ('rank', models.FloatField(db_index=True, default=0, help_text='The rank of the achievement, for the display order. The higher the number, the lower down on the page it shows.')),
            ],
            options={
                'ordering': ('rank',),
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired', models.BooleanField(db_index=True, default=False, help_text='True if the user has done everything needed to receive the achievement. False if there is only progress towards the goal.')),
                ('progress', models.IntegerField(default=0, help_text="For unacquired achievements, this field gives the user's progress towards the achievement's goal. (e.g. 17 events out of 25 required for the achievement.)")),
                ('explanation', models.CharField(blank=True, help_text='Can hold whatever extra metadata or notes about this achievement.', max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='achievements.Achievement')),
                ('assigner', models.ForeignKey(blank=True, help_text='The person who assigned this achievement. Null if the system assigned it.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigner', to=settings.AUTH_USER_MODEL)),
                ('term', models.ForeignKey(blank=True, help_text='The term in which this achievement was earned, or null.', null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Term')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AchievementIcon',
            fields=[
                ('achievement', models.OneToOneField(help_text='The achievement this icon corresponds to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='icon', serialize=False, to='achievements.Achievement')),
                ('image', models.ImageField(help_text='An image that corresponds and represents the achievement. The image should be 64x64 pixels.', upload_to='images/achievements/')),
                ('creator', models.ForeignKey(help_text='The creator of the icon image.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
